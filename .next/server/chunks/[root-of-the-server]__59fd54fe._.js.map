{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/godwi/Downloads/newimportapay/app/api/posts/route.ts"],"sourcesContent":["// app/api/posts/route.ts\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\n\r\nconst API_BASE_URL = \"https://admin-api.pay.importa.biz/api\";\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const searchParams = request.nextUrl.searchParams;\r\n    const page = searchParams.get(\"page\") || \"1\";\r\n\r\n    // Get token from Authorization header\r\n    const authHeader = request.headers.get(\"authorization\");\r\n\r\n    const headers: HeadersInit = {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    };\r\n\r\n    if (authHeader) {\r\n      headers[\"Authorization\"] = authHeader;\r\n    }\r\n\r\n    const response = await fetch(`${API_BASE_URL}/posts?page=${page}`, {\r\n      method: \"GET\",\r\n      headers,\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    return NextResponse.json(data, {\r\n      status: response.status,\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\r\n        \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"API Proxy Error:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to fetch posts\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function OPTIONS() {\r\n  return new NextResponse(null, {\r\n    status: 200,\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\r\n      \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\r\n    },\r\n  });\r\n}\r\n"],"names":[],"mappings":"AAAA,yBAAyB;;;;;AACzB;;AAEA,MAAM,eAAe;AAEd,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,eAAe,QAAQ,OAAO,CAAC,YAAY;QACjD,MAAM,OAAO,aAAa,GAAG,CAAC,WAAW;QAEzC,sCAAsC;QACtC,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;QAEvC,MAAM,UAAuB;YAC3B,gBAAgB;YAChB,QAAQ;QACV;QAEA,IAAI,YAAY;YACd,OAAO,CAAC,gBAAgB,GAAG;QAC7B;QAEA,MAAM,WAAW,MAAM,MAAM,GAAG,aAAa,YAAY,EAAE,MAAM,EAAE;YACjE,QAAQ;YACR;QACF;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,MAAM;YAC7B,QAAQ,SAAS,MAAM;YACvB,SAAS;gBACP,+BAA+B;gBAC/B,gCAAgC;gBAChC,gCAAgC;YAClC;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oBAAoB;QAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe;IACpB,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,MAAM;QAC5B,QAAQ;QACR,SAAS;YACP,+BAA+B;YAC/B,gCAAgC;YAChC,gCAAgC;QAClC;IACF;AACF","debugId":null}}]
}