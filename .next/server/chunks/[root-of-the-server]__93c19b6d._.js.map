{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/godwi/Downloads/newimportapay/app/api/proxy/%5B...path%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\n// Base URLs for different types of requests\nconst API_BASE_URL = 'https://admin-api.pay.importa.biz/api';\nconst STORAGE_BASE_URL = 'https://admin-api.pay.importa.biz/storage';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { path: string[] } }\n) {\n  const path = params.path.join('/');\n  const searchParams = request.nextUrl.searchParams.toString();\n  const queryString = searchParams ? `?${searchParams}` : '';\n  \n  // Determine if this is a storage request (starts with 'storage/')\n  const isStorageRequest = path.startsWith('storage/');\n  \n  // Construct the target URL based on the request type\n  let targetUrl: string;\n  if (isStorageRequest) {\n    // For storage requests, use the storage base URL and remove the 'storage/' prefix\n    const storagePath = path.replace(/^storage\\//, '');\n    targetUrl = `${STORAGE_BASE_URL}/${storagePath}${queryString}`;\n  } else {\n    // For API requests, use the API base URL\n    targetUrl = `${API_BASE_URL}/${path}${queryString}`;\n  }\n  \n  try {\n    // Forward the request to the target URL\n    const response = await fetch(targetUrl, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(request.headers.get('authorization') && {\n          'Authorization': request.headers.get('authorization') || ''\n        }),\n      },\n    });\n\n    // For storage requests, return the raw response (images, files, etc.)\n    if (isStorageRequest) {\n      const arrayBuffer = await response.arrayBuffer();\n      const contentType = response.headers.get('content-type') || 'application/octet-stream';\n      \n      return new NextResponse(arrayBuffer, {\n        status: response.status,\n        headers: {\n          'Content-Type': contentType,\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, OPTIONS',\n          'Cache-Control': 'public, max-age=31536000, immutable',\n        },\n      });\n    }\n\n    // For API requests, parse as JSON\n    const data = await response.json();\n    \n    // Return the JSON response with CORS headers\n    return new NextResponse(JSON.stringify(data), {\n      status: response.status,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n      },\n    });\n  } catch (error) {\n    console.error('Proxy error:', error);\n    return new NextResponse(\n      JSON.stringify({ error: 'Failed to fetch from API' }),\n      { \n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n        },\n      }\n    );\n  }\n}\n\n// Handle OPTIONS method for CORS preflight\nexport async function OPTIONS() {\n  return new NextResponse(null, {\n    status: 204,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n      'Access-Control-Max-Age': '86400', // 24 hours\n    },\n  });\n}\n\n// Add support for other HTTP methods if needed\nexport async function POST(\n  request: NextRequest, \n  context: { params: { path: string[] } }\n) {\n  return handleRequestWithBody('POST', request, context.params);\n}\n\nexport async function PUT(\n  request: NextRequest, \n  context: { params: { path: string[] } }\n) {\n  return handleRequestWithBody('PUT', request, context.params);\n}\n\nexport async function DELETE(\n  request: NextRequest, \n  context: { params: { path: string[] } }\n) {\n  const path = context.params.path.join('/');\n  const targetUrl = `${API_BASE_URL}/${path}`;\n  \n  try {\n    const response = await fetch(targetUrl, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        ...(request.headers.get('authorization') && {\n          'Authorization': request.headers.get('authorization') || ''\n        }),\n      },\n    });\n\n    const data = await response.json();\n    \n    return new NextResponse(JSON.stringify(data), {\n      status: response.status,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n      },\n    });\n  } catch (error) {\n    console.error('Proxy error:', error);\n    return new NextResponse(\n      JSON.stringify({ error: 'Failed to process DELETE request' }),\n      { status: 500 }\n    );\n  }\n}\n\nasync function handleRequestWithBody(\n  method: string, \n  request: NextRequest, \n  params: { path: string[] }\n) {\n  const path = params.path.join('/');\n  const targetUrl = `${API_BASE_URL}/${path}`;\n  \n  try {\n    const body = await request.json();\n    \n    const response = await fetch(targetUrl, {\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(request.headers.get('authorization') && {\n          'Authorization': request.headers.get('authorization') || ''\n        }),\n      },\n      body: JSON.stringify(body),\n    });\n\n    const data = await response.json();\n    \n    return new NextResponse(JSON.stringify(data), {\n      status: response.status,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n      },\n    });\n  } catch (error) {\n    console.error('Proxy error:', error);\n    return new NextResponse(\n      JSON.stringify({ error: `Failed to process ${method} request` }),\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}